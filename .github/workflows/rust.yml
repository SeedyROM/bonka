name: tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  CARGO_TERM_COLOR: always
  RUSTC_WRAPPER: sccache
  SCCACHE_CACHE_SIZE: 2G
  SCCACHE_DIR: /home/runner/.cache/sccache

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt, llvm-tools-preview

      - name: Cache Protobuf Compiler
        id: cache-protoc
        uses: actions/cache@v3
        with:
          path: |
            /usr/bin/protoc
            /usr/local/bin/protoc
            /usr/include/google/protobuf
            /usr/local/include/google/protobuf
          key: ${{ runner.os }}-protoc-3.x-${{ hashFiles('.github/workflows/rust.yml') }}

      - name: Install Protobuf Compiler
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache sccache output
        uses: actions/cache@v3
        with:
          path: /home/runner/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-

      - name: Setup incremental compilation
        run: |
          mkdir -p .cargo
          echo '[build]' > .cargo/config.toml
          echo 'incremental = true' >> .cargo/config.toml
          echo 'rustflags = ["-C", "target-cpu=native"]' >> .cargo/config.toml

      - name: Cache build and test artifacts
        id: cache-tests
        uses: actions/cache@v3
        with:
          path: |
            target/debug
            target/release
            target/debug/deps
            target/debug/incremental
            target/.rustc_info.json
            target/.fingerprint
            .cargo/config.toml
          key: ${{ runner.os }}-build-test-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.lock', '**/build.rs') }}
          restore-keys: |
            ${{ runner.os }}-build-test-

      - name: Check code format
        run: cargo fmt --all -- --check

      - name: Run tests
        run: |
          # Check if we need to run tests or if we can use cached results
          if [[ $(find src -type f -name "*.rs" -newer target/debug/deps -print -quit 2>/dev/null) ]]; then
            echo "Source files changed, running tests"
            RUSTFLAGS="-C target-cpu=native" cargo test --all-features
          else
            echo "Using cached test results"
            # Touch test files to update timestamps
            find target/debug/deps -type f -executable -name "*-*" -exec touch {} \;
          fi

      - name: Cache tools
        id: cache-tools
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/cargo-llvm-cov
            ~/.cargo/bin/cargo2junit
          key: ${{ runner.os }}-tools-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-tools-

      - name: Install cargo-llvm-cov
        if: steps.cache-tools.outputs.cache-hit != 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Install cargo2junit
        if: steps.cache-tools.outputs.cache-hit != 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo2junit

      - name: Cache junit.xml
        id: cache-junit
        uses: actions/cache@v3
        with:
          path: junit.xml
          key: ${{ runner.os }}-junit-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.lock') }}

      - name: Run tests with XML output
        if: steps.cache-junit.outputs.cache-hit != 'true'
        run: |
          RUSTC_BOOTSTRAP=1 cargo test -- -Z unstable-options --format json --report-time | cargo2junit > junit.xml

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: junit.xml
